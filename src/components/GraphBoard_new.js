import OGPreview from "./OGPreviewBoard"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º OGPreview
import AddCircleOutlineIcon from "@mui/icons-material/AddCircleOutline"; // –ò–º–ø–æ—Ä—Ç –∏–∫–æ–Ω–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
import React, { useState, useEffect } from "react";
import ReactFlow, { MiniMap, Controls, Background, applyEdgeChanges, applyNodeChanges } from "reactflow";
import "reactflow/dist/style.css";
import { IconButton} from "@mui/material";
// import {Badge, Box, Button, Switch} from "@mui/material";
import {analyzeNotes, deleteNote, fetchOpenGraphDataForNote, updateNoteCoordinates} from "../api/api";
import { useNavigate } from "react-router-dom";
import NoteModal_new from "./NoteModal_new";
import AttachFileIcon from "@mui/icons-material/AttachFile";
import DeleteIcon from "@mui/icons-material/Delete";
import {format} from "date-fns";
import {ru} from "date-fns/locale";

const GraphBoard_new = ({
                        notes,
                        setNotes,
                        onUpdateNote,
                        projects,
                        onCreateNote,
                        selectedProject,
                        filteredNotes,
                        setFilteredNotes,
                    }) => {
    const [nodes, setNodes] = useState([]);
    const [edges, setEdges] = useState([]);
    const [selectedNote, setSelectedNote] = useState(null);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedNoteIds, setSelectedNoteIds] = useState([]);
    const [activeTab] = useState(0); // –ê–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–±
    const [selectedTags, setSelectedTags] = useState([]); // –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏.
    const [openGraphData, setOpenGraphData] = useState({});
    const navigate = useNavigate();
    const [hoveredNote, setHoveredNote] = useState(null);
    const [recentlyHoveredNote, setRecentlyHoveredNote] = useState(null);


    // const handleLogout = () => {
    //     localStorage.removeItem("accessToken");
    //     localStorage.removeItem("refreshToken");
    //     navigate("/auth");
    // };

    const resizableStyle = {
        display: "flex",
        flexDirection: "column", // –í—ã—Å—Ç—Ä–∞–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–ª–æ–Ω–∫—É
        justifyContent: "space-between", // –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        alignItems: "center", // –¶–µ–Ω—Ç—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        width: "150px", //"100%",
        height: "150px", //"100%",
        padding: "8px", // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
        boxSizing: "border-box", // –£—á–∏—Ç—ã–≤–∞–µ–º padding –≤ —Ä–∞–∑–º–µ—Ä–∞—Ö
        overflow: "hidden", // –°–∫—Ä—ã–≤–∞–µ–º –≤—ã—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    };

    const ResizableHandle = ({ onResizeStart }) => (
        <div
            onMouseDown={onResizeStart}
            style={{
                position: "absolute",
                bottom: "-8px", // üîπ –°–Ω–∞—Ä—É–∂–∏ –Ω–æ–¥—ã
                right: "-8px",  // üîπ –°–Ω–∞—Ä—É–∂–∏ –Ω–æ–¥—ã
                width: "12px",
                height: "12px",
                backgroundColor: "#888",
                cursor: "se-resize",
                borderRadius: "4px",
                border: "2px solid #fff",
                zIndex: 20, // üîπ –í—ã—à–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            }}
        />
    );


    const onNodeDragStop = async (_, node) => {
        const movedNote = notes.find((note) => note.id === node.id);
        if (!movedNote) return;

        const updatedNote = { ...movedNote, x: Math.round(node.position.x), y: Math.round(node.position.y) };

        try {
            await updateNoteCoordinates(updatedNote.id, updatedNote.x, updatedNote.y);
            setNotes((prevNotes) => prevNotes.map((note) => note.id === updatedNote.id ? updatedNote : note));
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", error);
        }
    };


    const calculateNewNotePosition = (notes) => {
        if (notes.length === 0) {
            return { x: 100, y: 100 }; // –ï—Å–ª–∏ –∑–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç, —Å—Ç–∞–≤–∏–º –≤ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        }

        const minX = Math.min(...notes.map(note => note.x || 0));
        const minY = Math.min(...notes.map(note => note.y || 0));

        console.log("initial coordinates X:: ", minX, " Y: ", minY);

        return { x: minX + 50, y: minY + 50 }; // –°–º–µ—â–∞–µ–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É –≤–Ω–∏–∑ –∏ –≤–ø—Ä–∞–≤–æ
    };

    const handleDeleteNote = async (noteId) => {
        console.log("–£–¥–∞–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É: ",noteId);
        if (window.confirm("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–º–µ—Ç–∫—É?")) {
            try {
                await deleteNote(noteId);
                setNotes((prevNotes) => prevNotes.filter((note) => note.id !== noteId)); // ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            } catch (error) {
                alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏.");
            }
        }
    };

    const handleCopyNote = (originalNote) => {
        const copiedNote = {
            title: `Copy: ${originalNote.title}`,
            content: originalNote.content,
            tags: [...originalNote.tags],
            projectId: originalNote.projectId,
        };

        setSelectedNote(copiedNote);
        setIsModalOpen(true);
    };


    const getOpenGraphThumbnail = (note) => {
        if (!note.openGraphData || Object.keys(note.openGraphData).length === 0) return null;
        const firstOG = Object.values(note.openGraphData)[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é OG-—Å—Å—ã–ª–∫—É
        return <OGPreview ogData={firstOG} />;
    };
    const formatDate = (dateInput) => {
        if (!dateInput) return "–ù–µ—Ç –¥–∞—Ç—ã";

        // –ï—Å–ª–∏ `dateInput` - –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–∞—Ç—É
        if (Array.isArray(dateInput) && dateInput.length >= 6) {
            const [year, month, day, hour, minute, second, millisecond = 0] = dateInput;
            const date = new Date(year, month - 1, day, hour, minute, second, millisecond);
            return format(date, "dd.MM.yy HH:mm", { locale: ru });
        }

        return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞";
    };


    useEffect(() => {
        setNodes(
            (filteredNotes || []).map((note, index) => ({
                id: note.id,
                data: { label: note.content || "–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è" },
                position: { x: note.x || index * 100, y: note.y || index * 50 },
                style: { background: '#fff', border: '1px solid #ccc' },
            }))
        );
    }, [filteredNotes]);

    useEffect(() => {
        setNodes(
            notes?.map((note, index) => ({
                id: note.id,
                data: {
                    label: (
                        <div
                            style={{
                                position: "revert",
                                padding: "4px",
                                textAlign: "center",
                                fontSize: "12px",
                                overflow: "hidden",
                                whiteSpace: "nowrap",
                            }}
                            onMouseEnter={() => setHoveredNote(note.id)}
                            onMouseLeave={() => setTimeout(() => setHoveredNote(null), 500)}
                        >
                            <div style={{fontSize: "12px", fontWeight: "regular", right:"8px", color: "rgba(155,159,156,0.45)"}}>
                                {formatDate(note.createdAt)}
                            </div>
                            <div style={{fontSize: "18px", fontWeight: "bold"}}>
                                {note.title}
                            </div>
                            <div style={{fontSize: "16px", color: "#666"}}>
                                {note.content
                                    ? note.content.length > 30
                                        ? note.content.slice(0, 30) + "..."
                                        : note.content
                                    : ""}
                            </div>

                            {/* –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ OpenGraph */}
                            {getOpenGraphThumbnail(note)}

                            {/* –¢–µ–≥–∏ */}
                            <div
                                style={{
                                    display: "flex",
                                    flexWrap: "wrap",
                                    gap: "4px",
                                    marginTop: "4px",
                                    marginBottom: "4px",
                                    marginLeft: "2px",
                                }}
                            >
                                {note.tags?.map((tag) => (
                                    <span
                                        key={tag}
                                        style={{
                                            fontSize: "0.4rem",
                                            border: "1px solid #ccc",
                                            borderColor: getColorForTag(tag),
                                            borderRadius: "4px",
                                            padding: "2px 4px",
                                            backgroundColor: "#fff",
                                            color: getColorForTag(tag),
                                        }}
                                    >
                                    {tag}
                                </span>
                                ))}
                            </div>

                            {/* –ë–µ–π–¥–∂–∏–∫ –≤–ª–æ–∂–µ–Ω–∏–π */}
                            {((note.files?.length || 0) +
                                (note.audios?.length || 0) +
                                (note.urls?.length || 0)) > 0 && (
                                <div
                                    style={{
                                        position: "absolute",
                                        bottom: "2px",
                                        right: "2px",
                                        display: "flex",
                                        alignItems: "center",
                                        fontSize: "12px",
                                        color: "#006400",
                                        fontWeight: "bold",
                                    }}
                                >
                                    <AttachFileIcon style={{
                                        fontSize: "12px",
                                        fontWeight: "bold",
                                        marginRight: "2px",
                                        marginBottom: "2px"
                                    }}/>
                                    {(note.files?.length || 0) +
                                        (note.audios?.length || 0) +
                                        (note.urls?.length || 0)}
                                </div>
                            )}
                            {/* –ò–∫–æ–Ω–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è */}
                            {(hoveredNote === note.id || recentlyHoveredNote === note.id) && (
                                <IconButton
                                    onClick={(e) => {
                                        e.stopPropagation();
                                        handleCopyNote(note);
                                    }}
                                    onMouseEnter={() => setHoveredNote(note.id)}
                                    onMouseLeave={() => setTimeout(() => setHoveredNote(null), 300)}
                                    style={{
                                        position: "absolute",
                                        top: "50%",
                                        right: "-20px", // –°–Ω–∞—Ä—É–∂–∏ –Ω–æ–¥—ã
                                        transform: "translateY(-50%)",
                                        background: "rgba(255,255,255,0.9)",
                                        width: "20px",
                                        height: "20px",
                                        zIndex: 10,
                                        borderRadius: "50%",
                                        border: "1px solid #ccc",
                                        boxShadow: "0 2px 5px rgba(0,0,0,0.2)",
                                        padding: "2px",
                                    }}
                                >
                                    <AddCircleOutlineIcon color="primary" style={{fontSize: "16px"}}/>
                                </IconButton>
                            )}

                            {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è - –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É */}
                            {(hoveredNote === note.id || recentlyHoveredNote === note.id) && (
                                <IconButton
                                    onClick={(e) => {
                                        e.stopPropagation();
                                        handleDeleteNote(note.id);
                                    }}
                                    onMouseEnter={() => setRecentlyHoveredNote(note.id)}
                                    onMouseLeave={() => setTimeout(() => setRecentlyHoveredNote(null), 500)}
                                    style={{
                                        position: "absolute",
                                        top: "4px",
                                        right: "4px",
                                        background: "rgba(255,255,255,0.9)",
                                        width: "20px",
                                        height: "20px",
                                        zIndex: 10,
                                        borderRadius: "50%",
                                        border: "1px solid #ccc",
                                        boxShadow: "0 2px 5px rgba(0,0,0,0.2)",
                                        padding: "2px",
                                    }}
                                >
                                    <DeleteIcon color="error" style={{fontSize: "16px"}}/>
                                </IconButton>
                            )}
                            {/* –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ - –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É —Å–Ω–∞—Ä—É–∂–∏ */}
                            <ResizableHandle onResizeStart={(e) => handleResizeStart(e, note.id)}/>

                        </div>


                    ),
                },
                position: {x: note.x || index * 100, y: note.y || index * 50},
                style: {
                    width: `${note.width || 300}px`,
                    height: `${note.height || 200}px`,
                    background: "#fff",
                    border: "1px solid #ccc",
                    borderRadius: "8px",
                    boxSizing: "border-box",
                    padding: "8px",
                    position: "absolute",
                    overflow: "hidden",
                },
            }))
        );
        setEdges(getEdges(notes));
    }, [notes]); // ‚úÖ hoveredNote —É–±—Ä–∞–Ω –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π



    const getEdges = (notes) => {
        const edges = [];
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Ç–µ–≥–∞–º
        const tagToNotes = {};

        notes?.forEach((note) => {
            if (note.tags) {
                note.tags?.forEach((tag) => {
                    if (!tagToNotes[tag]) {
                        tagToNotes[tag] = [];
                    }
                    tagToNotes[tag].push(note);
                });
            }
        });

        // –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –ø–æ —Ç–µ–≥—É
        Object.entries(tagToNotes)?.forEach(([tag, notesWithTag]) => {
            if (notesWithTag.length > 1) {
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç —Å—Ç–∞—Ä–æ–π –∫ –Ω–æ–≤–æ–π)
                notesWithTag.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
                const sourceNote = notesWithTag[0]; // —Å–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞
                // –°–æ–∑–¥–∞—ë–º —Å–≤—è–∑—å –æ—Ç —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π –∫–æ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º
                for (let i = 1; i < notesWithTag.length; i++) {
                    const targetNote = notesWithTag[i];
                    edges.push({
                        id: `${sourceNote.id}-${targetNote.id}-${tag}`,
                        source: sourceNote.id,
                        target: targetNote.id,
                        animated: true,
                        style: { stroke: getColorForTag(tag) },
                    });
                }
            }
        });

        return edges;
    };


    const getColorForTag = (tag) => {
        const hash = Array.from(tag).reduce((sum, char) => sum + char.charCodeAt(0), 0);
        const colors = ["#FF5733", "#079c21", "#3357FF", "#F333FF", "#FF5733"];
        return colors[hash % colors.length];
    };

    const handleNodeClick = (event, node) => {
        const note = notes.find((n) => n.id === node.id);
        if (!note) {
            console.error("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:", node.id);
            return;
        }
        setSelectedNote(note);
        setIsModalOpen(true);
    };

    const handleSaveNote = async (updatedNote) => {


        const projectId = updatedNote.projectId || selectedProject;

        try {
            let savedNote;


            if (updatedNote.id) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
                savedNote = await onUpdateNote(updatedNote);
            } else {
                // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
                savedNote = await onCreateNote(updatedNote, projectId);
                setNotes((prevNotes) => [...prevNotes, savedNote]);
            }
            if (!savedNote) {
                console.error("‚ùå –û—à–∏–±–∫–∞: savedNote undefined –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", updatedNote);
                alert("–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É.");
                return;
            }
            setNotes((prevNotes) =>
                prevNotes.map((note) => (note.id === savedNote.id ? savedNote : note))
            );
                return savedNote;
            } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏:", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.");
            }
    };

    const handleAnalyze = async () => {
        try {
            const response = await analyzeNotes(selectedNoteIds);
            console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response);
            alert("–ó–∞–º–µ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑!");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑:", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –Ω–∞ –∞–Ω–∞–ª–∏–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
        } finally {
            setSelectedNoteIds([]);
        }
    };

    const handleResizeStart = (event, nodeId) => {
        event.preventDefault(); // üîπ –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
        event.stopPropagation(); // üîπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–ª–∞—Å—å –Ω–æ–¥–∞

        const node = nodes.find((n) => n.id === nodeId);
        if (!node) return;

        const startX = event.clientX;
        const startY = event.clientY;
        const startWidth = parseInt(node.style.width, 10) || 150;
        const startHeight = parseInt(node.style.height, 10) || 100;

        const handleMouseMove = (e) => {
            const newWidth = Math.max(50, startWidth + e.clientX - startX);
            const newHeight = Math.max(50, startHeight + e.clientY - startY);

            setNodes((prevNodes) =>
                prevNodes.map((n) =>
                    n.id === nodeId
                        ? {
                            ...n,
                            style: {
                                ...n.style,
                                width: `${newWidth}px`,
                                height: `${newHeight}px`,
                            },
                        }
                        : n
                )
            );
        };

        const handleMouseUp = async () => {
            document.removeEventListener("mousemove", handleMouseMove);
            document.removeEventListener("mouseup", handleMouseUp);

            const updatedNode = nodes.find((n) => n.id === nodeId);
            if (updatedNode) {
                const updatedNote = {
                    ...notes.find((note) => note.id === nodeId),
                    width: parseInt(updatedNode.style.width, 10),
                    height: parseInt(updatedNode.style.height, 10),
                };

                try {
                    await onUpdateNote(updatedNote); // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –±—ç–∫–µ–Ω–¥
                    setNotes((prevNotes) =>
                        prevNotes.map((note) => (note.id === updatedNote.id ? updatedNote : note))
                    );
                } catch (err) {
                    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –Ω–æ–¥—ã:", err);
                }
            }
        };

        document.addEventListener("mousemove", handleMouseMove);
        document.addEventListener("mouseup", handleMouseUp);
    };

    useEffect(() => {
        if (activeTab === 1) {
            const filteredByTags = notes.filter((note) =>
                selectedTags.some((selectedTag) => note.tags.includes(selectedTag))
            );
            setFilteredNotes(filteredByTags.length > 0 ? filteredByTags : notes);
        }
    }, [selectedTags, activeTab]);


    return (
        <div className="board" style={{width: "100%", height: "90vh"}}>
            <ReactFlow
                nodes={nodes}
                edges={edges} // –ü–æ–∫–∞ –±–µ–∑ —Å–≤—è–∑–µ–π
                onNodesChange={(changes) => {
                    const updatedNodes = applyNodeChanges(changes, nodes);
                    setNodes(updatedNodes);
                }}
                onEdgesChange={(changes) => setEdges(applyEdgeChanges(changes, edges))}
                onNodeDragStart={(event, node) => {
                    if (event.target.classList.contains("node-resize-handle")) {
                        event.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
                        return;
                    }
                }
                }
                // onNodeResizeStop={onNodeResizeStop}
                fitView

                onNodeClick={handleNodeClick}
                // onNodeDragStart={onNodeDragStart}
                onNodeDragStop={onNodeDragStop}

                style={{flex: 1}}

            >
                <MiniMap/>
                <Controls/>
                <Background gap={16} size={0.5} color="##11F3B2"/>
            </ReactFlow>
            <button
                onClick={() => {
                    setSelectedNote(null);
                    setIsModalOpen(true);
                }}
                style={{
                    position: "absolute",
                    bottom: "16px",
                    right: "16px",
                    color: "#fff",
                    border: "none",
                    borderRadius: "50%",
                    width: "56px",
                    height: "56px",
                    fontSize: "24px",
                    backgroundColor: "#0000CD",
                    cursor: "pointer",
                }}
            >
                +
            </button>
            {isModalOpen && (

                <NoteModal_new
                    open={isModalOpen}
                    onClose={() => setIsModalOpen(false)}
                    onSave={handleSaveNote}
                    onUpdateNote={handleSaveNote}
                    note={selectedNote || {urls: []}} // –ü–µ—Ä–µ–¥–∞—ë–º –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º urls
                    projects={projects}
                    selectedProject={selectedProject}
                    setNotes={setNotes} // –ü–µ—Ä–µ–¥–∞—á–∞ setNotes
                    notes={notes}
                    calculateNewNotePosition={() => calculateNewNotePosition(notes)} // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
                    onDelete={handleDeleteNote}
                    setSelectedNote={setSelectedNote} // üîπ –ü–µ—Ä–µ–¥–∞—ë–º setSelectedNote –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    setIsModalOpen={setIsModalOpen} // üîπ –ü–µ—Ä–µ–¥–∞—ë–º setIsModalOpen –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ

                />
            )}
            {selectedNoteIds.length > 0 && (
                <button
                    onClick={handleAnalyze}
                    style={{
                        position: "absolute",
                        top: "20px", // –ü–µ—Ä–µ–Ω–æ—Å –≤–Ω–∏–∑
                        right: "25px", // –ü–µ—Ä–µ–Ω–æ—Å –≤–ø—Ä–∞–≤–æ
                        padding: "5px 8px", // –ë—ã–ª–æ –±–æ–ª—å—à–µ
                        backgroundColor: "#007bff",
                        color: "#fff",
                        fontSize: "0.8rem", // –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                        border: "none",

                        borderRadius: "6px", // –°–¥–µ–ª–∞–µ–º —É–≥–ª—ã —á—É—Ç—å –±–æ–ª–µ–µ –æ—Å—Ç—Ä—ã–º–∏
                        cursor: "pointer",
                    }}
                >
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∞–Ω–∞–ª–∏–∑
                </button>
            )}
        </div>
    );
};

export default GraphBoard_new;