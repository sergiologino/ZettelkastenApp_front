import React, { useState, useEffect } from "react";
// import { ToastContainer, toast } from "react-toastify";
// import "react-toastify/dist/ReactToastify.css";
import {
    TextField,
    Button,
    Box,
    Typography,
    Container,
    Paper,
    Switch,
    FormControlLabel,
    Avatar,
    IconButton,
} from "@mui/material";
import axios from "axios";
import { useLocation, useNavigate } from "react-router-dom";
import { PhotoCamera } from "@mui/icons-material";
import { useDropzone } from "react-dropzone";
import { useSnackbar } from "notistack";
import api from "../api/api";

const Profile = () => {
    const location = useLocation();
    const navigate = useNavigate();
    // const { enqueueSnackbar } = useSnackbar();
    const enqueueSnackbar = (message, options) => {
        console.log(message, options);
    };

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    console.log("üîπ Profile.js –∑–∞–≥—Ä—É–∂–µ–Ω!");
    console.log("üîπ location.state:", location.state);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º `location.state?.user` (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ `null`
    // const [user, setUser] = useState(location.state?.user || null);
    // const [loading, setLoading] = useState(!user); // –ï—Å–ª–∏ user –µ—Å—Ç—å, –Ω–µ –≥—Ä—É–∑–∏–º

    // –ï—Å–ª–∏ user –ø—Ä–∏—à–µ–ª –∏–∑ state, –ª–æ–≥–∏—Ä—É–µ–º –µ–≥–æ


    const [user, setUser] = useState(location.state?.user || {});
    const [username, setUsername] = useState(user.username || "");
    const [email, setEmail] = useState(user.email || "");
    const [password, setPassword] = useState("");
    const [colorTheme, setColorTheme] = useState(user.color_theme || false);
    const [tlgUsername, setTlgUsername] = useState(user.tlg_username || "");
    const [phoneNumber, setPhoneNumber] = useState(user.phone_number || "");
    const [billing, setBilling] = useState(user.billing || false);
    const [avatar, setAvatar] = useState(user.avatar || null);
    const [avatarPreview, setAvatarPreview] = useState(user.avatar || "");
    const [loading, setLoading] = useState(!user); // –ï—Å–ª–∏ user –µ—Å—Ç—å, –Ω–µ –≥—Ä—É–∑–∏–º
    console.log("–ø–æ–ª—å–∑–∞–∫: ", user);

    console.log("üîπ user –∏–∑ location.state:", user);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    useEffect(() => {
        const fetchUserData = async () => {
            try {
                const accessToken = localStorage.getItem("accessToken");
                if (accessToken) {
                    const response = await api.get("/users/me", {
                        headers: {
                            Authorization: `Bearer ${accessToken}`,
                        },
                    });
                    setUser(response.data);
                    setUsername(response.data.username);
                    setEmail(response.data.email);
                    setColorTheme(response.data.color_theme || false);
                    setTlgUsername(response.data.tlg_username || "");
                    setPhoneNumber(response.data.phone_number || "");
                    setBilling(response.data.billing || false);
                    setAvatar(response.data.avatar || "");
                    setAvatarPreview(response.data.avatar || "");
                }
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
            }
        };

        fetchUserData();
    }, []);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram username
    const validateTlgUsername = (username) => {
        const regex = /^@[a-zA-Z0-9_]{5,32}$/;
        return regex.test(username);
    };

    useEffect(() => {
        if (!user) {
            setLoading(true);
            const fetchUserData = async () => {
                try {
                    const accessToken = localStorage.getItem("accessToken");
                    if (accessToken) {
                        const response = await api.get("/users/me");
                        console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", response.data);
                        setUser(response.data);
                    }
                } catch (error) {
                    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
                    alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.");
                    navigate("/auth"); // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                } finally {
                    setLoading(false);
                }
            };
            fetchUserData();
        }
    }, [user, navigate]);

    if (loading) {
        return <Typography>–ó–∞–≥—Ä—É–∑–∫–∞...</Typography>; // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    }

    if (!user) {
        return <Typography>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.</Typography>;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const validatePhoneNumber = (phone) => {
        const regex = /^\+\d{1,3} \(\d{1,3}\) \d{3}-\d{2}-\d{2}$/;
        return regex.test(phone);
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
    const onDrop = (acceptedFiles) => {
        const file = acceptedFiles[0];
        if (file.size > 400 * 1024) {
            enqueueSnackbar("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 400 –ö–ë)", { variant: "error" });
            return;
        }
        const reader = new FileReader();
        reader.onload = () => {
            setAvatarPreview(reader.result);
            setAvatar(file);
        };
        reader.readAsDataURL(file);
    };

    // eslint-disable-next-line react-hooks/rules-of-hooks
    const { getRootProps, getInputProps } = useDropzone({
        onDrop,
        accept: "image/png, image/jpeg, image/bmp",
        maxSize: 400 * 1024, // 400 –ö–ë
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
    const handleSubmit = async (e) => {
        e.preventDefault();

        if (!validateTlgUsername(tlgUsername)) {
            enqueueSnackbar("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram username (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å @username)", {
                variant: "error",
            });
            return;
        }

        if (!validatePhoneNumber(phoneNumber)) {
            enqueueSnackbar(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +X (XXX) XXX-XX-XX)",
                { variant: "error" }
            );
            return;
        }

        try {
            const formData = new FormData();
            formData.append("username", username);
            formData.append("email", email);
            formData.append("password", password);
            formData.append("tlg_username", tlgUsername);
            formData.append("phone_number", phoneNumber);
            formData.append("billing", billing);
            if (avatar) {
                formData.append("avatar", avatar);
            }

            const response = await axios.put(`/api/users/${user.id}`, formData, {
                headers: {
                    "Content-Type": "multipart/form-data",
                    Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
                },
            });

            if (response.status === 200) {
                console.log("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω:", response.data);
                setUser(response.data); // ‚úÖ –¢–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤—è—Ç—Å—è –≤ UI
                alert("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!");
            } else {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: ", response.statusText);
                alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.");
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.");
        }
    };

    const handleCancel = () => {
        navigate(-1); // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    };

    return (
        <Container maxWidth="sm">
            <Paper elevation={3} sx={{ padding: 4, marginTop: 8, borderRadius: 2 }}>
                <Box
                    display="flex"
                    flexDirection="column"
                    alignItems="center"
                    justifyContent="center"
                >
                    <Typography variant="h4" gutterBottom sx={{ fontWeight: "bold", color: "primary.main" }}>
                        –ü—Ä–æ—Ñ–∏–ª—å
                    </Typography>
                    {console.log("üîç –î–∞–Ω–Ω—ã–µ –≤ Profile.js:", user)}

                    {/* –ê–≤–∞—Ç–∞—Ä */}
                    <Box {...getRootProps()} sx={{ mb: 2, textAlign: "center" }}>
                        <input {...getInputProps()} />
                        <Avatar
                            src={avatarPreview || "/default-avatar.png"}
                            sx={{ width: 100, height: 100, cursor: "pointer" }}
                        />
                        <IconButton color="primary" aria-label="upload avatar">
                            <PhotoCamera />
                        </IconButton>
                        <Typography variant="caption" display="block" sx={{ mt: 1 }}>
                            –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ (PNG, JPG, BMP, –¥–æ 400 –ö–ë)
                        </Typography>
                    </Box>

                    {/* –õ–æ–≥–∏–Ω */}
                    <TextField
                        fullWidth
                        label="–õ–æ–≥–∏–Ω"
                        name="username"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        margin="normal"
                        variant="outlined"
                        sx={{ mb: 2 }}
                    />

                    {/* Email */}
                    <TextField
                        fullWidth
                        label="Email"
                        name="email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        margin="normal"
                        variant="outlined"
                        sx={{ mb: 2 }}
                    />

                    {/* –ü–∞—Ä–æ–ª—å */}
                    <TextField
                        fullWidth
                        type="password"
                        label="–ü–∞—Ä–æ–ª—å"
                        name="password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        margin="normal"
                        variant="outlined"
                        sx={{ mb: 2 }}
                    />

                    {/* Telegram username */}
                    <TextField
                        fullWidth
                        label="Telegram username"
                        name="tlg_username"
                        value={tlgUsername}
                        onChange={(e) => setTlgUsername(e.target.value)}
                        margin="normal"
                        variant="outlined"
                        sx={{ mb: 2 }}
                        placeholder="@username"
                        helperText="–í–≤–µ–¥–∏—Ç–µ Telegram username –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username"
                    />

                    {/* –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ */}
                    <TextField
                        fullWidth
                        label="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                        name="phone_number"
                        value={phoneNumber}
                        onChange={(e) => setPhoneNumber(e.target.value)}
                        margin="normal"
                        variant="outlined"
                        sx={{ mb: 2 }}
                        placeholder="+X (XXX) XXX-XX-XX"
                        helperText="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +X (XXX) XXX-XX-XX"
                    />

                    {/* –¶–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–∞ */}
                    <FormControlLabel
                        control={
                            <Switch
                                checked={colorTheme}
                                onChange={(e) => setColorTheme(e.target.checked)}
                                color="primary"
                            />
                        }
                        label="–¢–µ–º–Ω–∞—è —Ç–µ–º–∞"
                        sx={{ mb: 2 }}
                    />

                    {/* –ü—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç */}
                    <FormControlLabel
                        control={
                            <Switch
                                checked={billing}
                                onChange={(e) => setBilling(e.target.checked)}
                                color="primary"
                            />
                        }
                        label="–ü—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç"
                        sx={{ mb: 2 }}
                    />

                    {/* –ö–Ω–æ–ø–∫–∏ */}
                    <Box display="flex" justifyContent="space-between" width="100%">
                        <Button
                            variant="outlined"
                            color="secondary"
                            onClick={handleCancel}
                            sx={{ mt: 2, width: "48%" }}
                        >
                            –û—Ç–º–µ–Ω–∞
                        </Button>
                        <Button
                            variant="contained"
                            color="primary"
                            onClick={handleSubmit}
                            sx={{ mt: 2, width: "48%" }}
                        >
                            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        </Button>
                    </Box>
                </Box>
            </Paper>
        </Container>
    );
};

export default Profile;