import React, {useState, useEffect, useRef} from "react";
import {
    Box,
    Button,
    Modal,
    TextField,
    Typography,
    Select,
    MenuItem,
    FormControl,
    InputLabel,
    Tabs,
    Tab,
    Chip,
    IconButton,
    Badge,
    Fade, Autocomplete,
} from "@mui/material";
import ContentCopyIcon from "@mui/icons-material/ContentCopy"; // –ò–∫–æ–Ω–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
import SaveIcon from "@mui/icons-material/Save"; // –ò–∫–æ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
import CancelIcon from "@mui/icons-material/Cancel"; // –ò–∫–æ–Ω–∫–∞ –æ—Ç–º–µ–Ω—ã
import DeleteIcon from "@mui/icons-material/Delete"; // –ò–∫–æ–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
import DownloadIcon from "@mui/icons-material/Download";
import './appStyle.css';
import { Save, Close, Add } from "@mui/icons-material";
import { AttachFile, Delete } from "@mui/icons-material";
import OGPreview from "./OGPreview";
import {
    addNote,
    fetchAllTags,
    fetchProjects,
    updateNote,
    updateNoteWithFiles,
    uploadAudioFiles,
    uploadFiles
} from "../api/api";
import { fetchOpenGraphData } from "../api/api";
import ReactQuill, {Quill} from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import hljs from 'highlight.js';
import 'highlight.js/styles/github.css'; // –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ç–∏–ª–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
import "katex/dist/katex.min.css";
import 'react-quill/dist/quill.bubble.css';
const NoteModal_new = ({
                       open,
                       onClose,
                       onSave,
                       onUpdateNote,
                       onDelete,
                       setNotes,
                       notes,
                       projects = [],
                       isGlobalAnalysisEnabled = false,
                       note = null,
                       selectedProject,
                       calculateNewNotePosition,
                       setSelectedNote,
                       setIsModalOpen,

                   }) => {
    const [activeTab, setActiveTab] = useState(0);
    const [title, setTitle] = useState(note?.title ?? "–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞");
    const [content, setContent] = useState(note?.content || "");
    const [file, setFile] = useState(null);
    const [selectedProjectModal, setSelectedProject] = useState(note?.projectId ?? selectedProject);
    const [selectedCategory, setSelectedCategory] = useState(note?.category || "");
    const [individualAnalysisFlag, setIndividualAnalysisFlag] = useState(isGlobalAnalysisEnabled);
    const [tags, setTags] = useState(note?.tags || []);
    const [newTag, setNewTag] = useState("");
    const [files, setFiles] = useState(note?.files || []);
    const [urls, setUrls] = useState(note?.urls || []);
    const [newUrl, setNewUrl] = useState("");
    const [audios, setAudioFiles] = useState(note?.audioFiles || []);
    const [isRecording, setIsRecording] = useState(false);
    const [mediaRecorder, setMediaRecorder] = useState(null);
    const [recordedAudio, setRecordedAudio] = useState(null);
    const [openGraphData, setOpenGraphData] = useState({});
    const [deletedFiles, setDeletedFiles] = useState([]);
    const [deletedAudios, setDeletedAudios] = useState([]);
    const [project, setProjectName] = useState(note?.project|| "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ");
    // const [notes, setNotes]=useState([]);
    const [errors, setErrors] = useState({});
    const noteId = note?.id || "–ù–µ—Ç ID";
    const BASE_URL = process.env.REACT_APP_API_URL;
    const titleRef = useRef(title);
    const [filteredTags, setFilteredTags] = useState(tags);
    const [showEditor, setShowEditor] = useState(false);

    useEffect(() => {
        if (open && activeTab === 0) {
            setShowEditor(false);
            const timer = setTimeout(() => setShowEditor(true), 100); // 100 –º—Å –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–∞–ª–∫–∏
            return () => clearTimeout(timer);
        }
    }, [open, activeTab]);

    useEffect(() => {
        hljs.configure({
            languages: ['javascript', 'java', 'python', 'html', 'css', 'json', 'xml'],
        });
    }, []);

    useEffect(() => {
        if (!note?.projectId) {

            setSelectedProject(selectedProject); // ‚úÖ –¢–µ–ø–µ—Ä—å —Å–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ `selectedProject`

        }
    }, [selectedProject]);

    useEffect(() => {
        if (!note?.id) { // ‚úÖ –¢–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
            setSelectedProject(selectedProject);

        }
    }, [selectedProject]); // ‚úÖ –¢–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è `selectedProject`

    useEffect(() => {
        if (open) {
            if (note?.id) {  // ‚úÖ –ï—Å–ª–∏ –∑–∞–º–µ—Ç–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                setTitle(note.title || "–ó–∞–º–µ—Ç–∫–∞ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞");
                setContent(note.content || "–ó–∞–º–µ—Ç–∫–∞ –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞");
                setSelectedProject(note.projectId || "");
                setSelectedCategory(note.category || "");
                setTags(note.tags || []);
                setAudioFiles(note.audios || []);
                setFiles(note.files || []);
                setProjectName(note.projectName || "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ");
                setOpenGraphData(note.openGraphData || {});
            } else {  // ‚úÖ –ï—Å–ª–∏ `note` –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é

                setTitle("");
                setContent("");
                setSelectedProject(selectedProject);

                setSelectedCategory("");
                setTags([]);
                setOpenGraphData({});
                setAudioFiles([]);
                setFiles([]);
                setUrls([]);
            }
        }
    }, [open, note, selectedProject]);

    useEffect(() => {
        if (note) {
            setTitle(note.title || "–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞");
            setContent(note.content || "");
            setTags(note.tags || []);
            setSelectedProject(note.projectId || selectedProject);
        }
    }, [note]); // üîπ –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º note

    const modules = {
        syntax: {
            highlight: text => hljs.highlightAuto(text).value, // –ò—Å–ø–æ–ª—å–∑—É–µ–º Highlight.js –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫–æ–¥–∞
        },
        toolbar: [
            [{ 'font': [] }, { 'size': [] }],
            ['bold', 'italic', 'underline', 'strike'],
            [{ 'color': [] }, { 'background': [] }],
            [{ 'script': 'sub' }, { 'script': 'super' }],
            [{ 'header': 1 }, { 'header': 2 }, 'blockquote', 'code-block'],
            [{ 'list': 'ordered'}, { 'list': 'bullet' }, { 'indent': '-1' }, { 'indent': '+1' }],
            [{ 'direction': 'rtl' }, { 'align': [] }],
            ['link', 'image', 'video', 'formula'],
            ['clean']
        ]
    };

    const validate = () => {
        const newErrors = {};
        if (!content.trim()) newErrors.content = "–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º";
        if (!selectedProjectModal) newErrors.project = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç";
        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    // –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏
    const startRecording = async () => {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({audio: true});
            const recorder = new MediaRecorder(stream);
            const audioChunks = [];

            recorder.ondataavailable = (event) => {
                audioChunks.push(event.data);
            };

            recorder.onstop = () => {
                const audioBlob = new Blob(audioChunks, {type: 'audio/mp3'});
                const audioUrl = URL.createObjectURL(audioBlob);
                setRecordedAudio({url: audioUrl, blob: audioBlob, name: `recording-${Date.now()}.mp3`});
            };

            recorder.start();
            setMediaRecorder(recorder);
            setIsRecording(true);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É.");
        }
    };






    const handleDownloadAudio = async (e, audio) => {
        e.preventDefault(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        console.log("–ü—É—Ç—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ: ", BASE_URL + audio.url);
        if (!audio || !audio.url) {
            console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç audio:", audio);
            return;
        }
        try {
            const response = await fetch(BASE_URL + audio.url);
            if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞");

            const blob = await response.blob();
            const link = document.createElement("a");
            link.href = URL.createObjectURL(blob);
            link.download = audio.name || "noname.mp3";
            link.click();
            URL.revokeObjectURL(link.href); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ:", error);
        }
    };

    const handleDownloadFile = async (e, file) => {
        e.preventDefault(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        console.log("–ü—É—Ç—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ : ", BASE_URL + file.fileUrl);
        if (!file || !file.fileUrl) {
            console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç :", file);
            return;
        }
        try {
            console.log("download file: ",file);
            const response = await fetch(BASE_URL + file.fileUrl);
            if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞");

            const blob = await response.blob();
            const link = document.createElement("a");
            link.href = URL.createObjectURL(blob);
            link.download = file.name;
            link.click();
            URL.revokeObjectURL(link.href); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:", error);
        }
    };

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏
    const stopRecording = () => {
        if (mediaRecorder) {
            mediaRecorder.stop();
            setIsRecording(false);
        }
    };


// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ –≤ —Å–ø–∏—Å–æ–∫
    const saveRecordedAudio = () => {
        if (recordedAudio) {
            setAudioFiles((prev) => [...prev, recordedAudio]);
            setRecordedAudio(null);
        }
    };


    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    const handleFileChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            const fileData = {
                name: file.name,
                url: URL.createObjectURL(file), // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
                file,
            };
            setFiles((prevFiles) => [...prevFiles, fileData]); // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        }
    };


    // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const handleFileDelete = (fileToDelete) => {
        setFiles((prevFiles) => prevFiles.filter((file) => file !== fileToDelete));

        if (fileToDelete.id) {
            setDeletedFiles((prev) => [...prev, fileToDelete.id]);
        }
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    const handleAudioDelete = (audioToDelete) => {
        setAudioFiles((prev) => prev.filter((audio) => audio !== audioToDelete));
        if (audioToDelete.id) {
            setDeletedAudios((prev) => [...prev, audioToDelete.id]);
        }
    };

    const handleAddUrl = async () => {
        if (!newUrl.trim()) {
            alert("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É.");
            return;
        }
        if (!/^https?:\/\/[^\s$.?#].[^\s]*$/.test(newUrl.trim())) {
            alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL.");
            return;
        }

        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å OpenGraph –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ URL
            const ogData = await fetchOpenGraphData(newUrl.trim());
            setOpenGraphData((prev) => ({
                ...prev,
                [newUrl]: ogData || { url: newUrl }, // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ URL
            }));
            setUrls((prevUrls) => [...prevUrls, newUrl]); // –î–æ–±–∞–≤–ª—è–µ–º URL –≤ —Å–ø–∏—Å–æ–∫
            setNewUrl("");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ OpenGraph –¥–∞–Ω–Ω—ã—Ö:", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å OpenGraph –¥–∞–Ω–Ω—ã–µ. URL –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö.");
            setUrls((prevUrls) => [...prevUrls, newUrl]); // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ URL
            setNewUrl("");
        }
        console.log("–º–∞—Å—Å–∏–≤ —Å—Å—ã–ª–æ–∫ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è OGData: ",urls);
    };



    // –£–¥–∞–ª–∏—Ç—å URL
    const handleDeleteUrl = (urlToDelete) => {
        setUrls((prevUrls) => prevUrls.filter((url) => url !== urlToDelete));
        const updatedOpenGraphData = {...openGraphData};
        delete updatedOpenGraphData[urlToDelete];
        setOpenGraphData(updatedOpenGraphData);
    };

    const handleAddTag = () => {
        if (newTag.trim() && !tags.includes(newTag.trim())) {
            setTags([...tags, newTag.trim()]);
            setNewTag("");
        }
    };

    const handleDeleteTag = (tagToDelete) => {
        setTags(tags.filter((tag) => tag !== tagToDelete));
    };

    const handleSave = async () => {
        if (!validate()) return;

        let savedNote = {
                ...note,
                title,
                content,
                projectId: selectedProjectModal,
                category: selectedCategory,
                tags: tags ?? [],
                urls: urls ?? []
            };


                // files.forEach((file) => {
                //     if (file instanceof File) {
                //         formDataFiles.append("files", file);
                //     } else if (file.file instanceof File) {
                //         formDataFiles.append("files", file.file);
                //     }
                // });

        try {
            console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–º–µ—Ç–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", savedNote);

            if (savedNote.id) {
                savedNote = await updateNote(savedNote);
            } else {
                const newPosition = calculateNewNotePosition(notes);
                savedNote.x = newPosition.x;
                savedNote.y = newPosition.y;
                savedNote = await addNote(savedNote, selectedProjectModal);
            }

            if (savedNote.id) {
                const formData = new FormData();
                formData.append("note", new Blob([JSON.stringify(savedNote)], { type: "application/json" }));

                files.forEach((file) => {
                    if (file instanceof File) {
                        formData.append("files", file);
                    } else if (file.file instanceof File) {
                        formData.append("files", file.file);
                    }
                });


                audios.forEach((audio) => {
                    if (audio.blob instanceof Blob) {
                        formData.append("audios", audio.blob, audio.name || "recording.mp3");
                    }
                });

                // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                formData.append("deletedFiles", new Blob([JSON.stringify(deletedFiles)], { type: "application/json" }));

                // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                formData.append("deletedAudios", new Blob([JSON.stringify(deletedAudios)], { type: "application/json" }));



                console.log("–§–∏–Ω–∞–ª—å–Ω–∞—è FormData –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:");
                for (let pair of formData.entries()) {
                    console.log(pair[0], pair[1]);
                }

                savedNote = await updateNoteWithFiles(formData);
            } else {
                savedNote = await onSave(savedNote);
            }


            setNotes((prevNotes) => {
                const existingIndex = prevNotes.findIndex((n) => n.id === savedNote.id);
                return existingIndex !== -1 ? prevNotes.map((n) => (n.id === savedNote.id ? savedNote : n)) : [...prevNotes, savedNote];
            });

            alert("–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!");
            onClose();
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏:", error.response?.data || error.message);
        }
    };








    const handleAudioFileChange = (e) => {
        const file = e.target.files[0];
        if (file && (file.type === "audio/mpeg" || file.type === "audio/wav" || file.type === "audio/m4a")) {
            setAudioFiles((prev) => [...prev, {name: file.name, url: URL.createObjectURL(file), blob: file}]);
        } else {
            alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3 –∏–ª–∏ WAV.");
        }
    };




    const generateDefaultFileName = () => {
        const now = new Date();
        const year = now.getFullYear();
        const month = String(now.getMonth() + 1).padStart(2, "0");
        const day = String(now.getDate()).padStart(2, "0");
        const hours = String(now.getHours()).padStart(2, "0");
        const minutes = String(now.getMinutes()).padStart(2, "0");

        return `${year}-${month}-${day}_${hours}-${minutes}_recording.mp3`;
    };

    const handleCopyFromModal = () => {
        const copiedNote = {
            title: `Copy: ${title}`,
            content,
            tags: [...tags],
            projectId: selectedProjectModal,
        };

        onClose(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–º–µ—Ç–∫—É
        setTimeout(() => {
            setSelectedNote(copiedNote);
            setIsModalOpen(true);
        }, 300); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ä–µ–∑–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    };



    return (
        <Modal open={open} onClose={onClose} aria-labelledby="modal-title" aria-describedby="modal-description">
            <Box
                sx={{
                    position: "absolute",
                    top: "50%",
                    left: "50%",
                    transform: "translate(-50%, -50%)",
                    width: "900px",
                    height: "700px",
                    bgcolor: "background.paper",
                    boxShadow: 24,
                    borderRadius: "8px",
                    display: "flex",
                    flexDirection: "column",
                    overflow: "hidden",
                }}
            >
                <Typography sx={{ color: "#757575", margin: "10px", textAlign:"left" ,fontSize: "small", flexWrap: "wrap", left: "10px",bottom:"2px", mt: 2 }}>id –∑–∞–º–µ—Ç–∫–∏: {note.id}</Typography>
                <TextField
                    fullWidth
                    margin="normal"
                    label="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    error={!!errors.title}
                    helperText={errors.title}
                    sx={{ mb: 2,  width: "90%", marginLeft:"25px", marginRight:"25px", }}
                />
                <FormControl
                    fullWidth
                    label="–ü—Ä–æ–µ–∫—Ç"
                    margin="none"
                    value={project}
                    error={!!errors.project}
                    sx={{ mb: 2,  width: "90%", marginLeft:"25px", marginRight:"25px", }}>
                    <InputLabel id="project-select-label"></InputLabel>
                    <Select
                        labelId="project-select-label"
                        value={selectedProjectModal || ""}
                        onChange={(e) => setSelectedProject(e.target.value)}
                    >
                        {projects.length > 0 ? (
                            projects.map((project) => (
                                <MenuItem key={project.id} value={project.id}>
                                    {project.name}
                                </MenuItem>
                            ))
                        ):(
                            <MenuItem disabled>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤</MenuItem>
                        )}
                    </Select>
                    {errors.project && <Typography color="error" variant="caption">{errors.project}</Typography>}
                </FormControl>
                <Tabs value={activeTab} onChange={(e, newValue) => setActiveTab(newValue)} centered sx={{ borderBottom: "1px solid #e0e0e0" }}>
                    <Tab label="–û—Å–Ω–æ–≤–Ω–æ–µ" />
                    <Tab label={<Badge
                        badgeContent={
                            (Array.isArray(files) ? files.length : 0) +
                            (Array.isArray(audios) ? audios.length : 0) +
                            (Array.isArray(urls) ? urls.length : 0)
                        }
                        color="primary"
                    >
                        –í–ª–æ–∂–µ–Ω–∏—è
                    </Badge>} />
                </Tabs>
                <Box sx={{ overflowY: "auto", padding: 4 }}>
                    {/*<Fade in={activeTab === 0} timeout={500}>*/}
                    <Box>
                        {activeTab === 0 && (
                            <>
                                {showEditor && (
                                    <ReactQuill
                                        style={{ height: "150px", marginBottom: "10px" }}
                                        modules={modules}
                                        theme="snow"
                                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏..."
                                        value={content}
                                        onChange={setContent}
                                    />
                                )}
                                <Box sx={{ marginTop: "170px" }}>
                                    <TextField
                                        label="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥"
                                        value={newTag}
                                        onChange={(e) => setNewTag(e.target.value)}
                                        onKeyDown={(e) => e.key === "Enter" && handleAddTag()}
                                        sx={{ marginRight: 2 }}
                                    />
                                    <Button variant="contained" onClick={handleAddTag}>
                                        –î–æ–±–∞–≤–∏—Ç—å
                                    </Button>
                                </Box>
                                <Box sx={{ display: "flex", flexWrap: "wrap", gap: 1, mt: 2 }}>
                                    {tags.map((tag) => (
                                        <Chip
                                            key={tag}
                                            label={tag}
                                            onDelete={() => handleDeleteTag(tag)}
                                            color="primary"
                                            variant="outlined"
                                        />
                                    ))}
                                </Box>
                            </>
                        )}
                    </Box>
                    {/*</Fade>*/}
                    <Fade in={activeTab === 1} timeout={500}>
                        <Box>
                            {activeTab === 1 && (
                                <>
                                    {/*<Typography variant="h6">–í–ª–æ–∂–µ–Ω–∏—è</Typography>*/}
                                    <Box mt={2}>
                                        {/*<Typography variant="subtitle1">–§–∞–π–ª—ã:</Typography>*/}
                                        <Button variant="outlined" component="label" startIcon={<AttachFile />} sx={{ marginTop: "8px", color:"#FFFFFF",backgroundColor:"#0033FF" }}>
                                            {/*–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª*/}
                                            <input type="file" hidden onChange={handleFileChange} />
                                        </Button>
                                        <Box mt={2}>
                                            {files?.map((file, index) => (
                                                <Box key={index} display="flex" justifyContent="space-between" alignItems="flex-end" mb={1}>
                                                    <Typography variant="body2">{file.fileName || file.name}</Typography>
                                                    <IconButton onClick={(e) => handleDownloadFile(e, file)} aria-label="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª">
                                                        <DownloadIcon />
                                                    </IconButton>
                                                    <IconButton color="error" onClick={() => handleFileDelete(file)}>
                                                        <Delete />
                                                    </IconButton>
                                                </Box>
                                            ))}
                                        </Box>
                                    </Box>
                                    <Box mt={2}>
                                        {/*<Typography variant="subtitle1">–°—Å—ã–ª–∫–∏:</Typography>*/}
                                        <Box display="flex" mt={1}>
                                            <TextField
                                                fullWidth
                                                label="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É"
                                                value={newUrl}
                                                onChange={(e) => setNewUrl(e.target.value)}
                                                sx={{ marginRight: "8px" }}
                                            />
                                            <Button variant="contained" onClick={handleAddUrl}>
                                                –î–æ–±–∞–≤–∏—Ç—å
                                            </Button>
                                        </Box>
                                        <Box mt={2}>
                                            {/*<Typography variant="subtitle1">–°—Å—ã–ª–∫–∏:</Typography>*/}
                                            {Object.keys(openGraphData).length > 0 ? (
                                                Object.entries(openGraphData).map(([url, ogData], index) => (
                                                    <Box key={index} display="flex" alignItems="center" justifyContent="space-between" mt={1}>
                                                        {ogData ? (
                                                            <OGPreview
                                                                ogData={{
                                                                    title: ogData.title || ogData.url,
                                                                    description: ogData.description || "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                                                                    image: ogData.image || "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                                                                    url: ogData.url || url,
                                                                }}
                                                            />
                                                        ) : (
                                                            <Typography variant="body2">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è URL: {url}</Typography>
                                                        )}
                                                        <IconButton color="error" onClick={() => handleDeleteUrl(url)}>
                                                            <Delete />
                                                        </IconButton>
                                                    </Box>
                                                ))
                                            ) : (
                                                <Typography variant="body2">–ù–µ—Ç OpenGraph –¥–∞–Ω–Ω—ã—Ö</Typography>
                                            )}
                                        </Box>
                                    </Box>
                                    <Box mt={2}>
                                        {/*<Typography variant="subtitle1">–ê—É–¥–∏–æ—Ñ–∞–π–ª—ã:</Typography>*/}
                                        <Box display="flex" gap={2} mt={1}>
                                            <Button
                                                variant="contained"
                                                color={isRecording ? "error" : "primary"}
                                                onClick={isRecording ? stopRecording : startRecording}
                                            >
                                                {isRecording ? "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å" : "–ó–∞–ø–∏—Å–∞—Ç—å –∞—É–¥–∏–æ"}
                                            </Button>
                                            {recordedAudio && (
                                                <Button variant="outlined" onClick={saveRecordedAudio}>
                                                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
                                                </Button>
                                            )}
                                            <Button variant="outlined" component="label">
                                                –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
                                                <input type="file" hidden accept="audio/*" onChange={handleAudioFileChange} />
                                            </Button>
                                        </Box>
                                        <Box mt={2}>
                                            {audios?.map((audio, index) => (
                                                <Box key={index} display="flex" justifyContent="space-between" alignItems="flex-end" mb={1}>
                                                    <audio controls src={`${BASE_URL}${audio.url}`} style={{ width: "40%", fontSize: "0.5em", height: "30px", padding: "inherit" }} />
                                                    <Typography variant="body2" style={{ color: "#888", fontSize: "0.6rem" }}>
                                                        {audio.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
                                                    </Typography>
                                                    <IconButton onClick={(e) => handleDownloadAudio(e, audio)} aria-label="–°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ">
                                                        <DownloadIcon />
                                                    </IconButton>
                                                    <IconButton color="error" onClick={() => handleAudioDelete(audio)}>
                                                        <Delete />
                                                    </IconButton>
                                                </Box>
                                            ))}
                                        </Box>
                                    </Box>
                                </>
                            )}
                        </Box>
                    </Fade>
                </Box>
                <Box sx={{ display: "flex", justifyContent: "space-between", padding: "16px", borderTop: "1px solid #e0e0e0" }}>

                    {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (–ª–µ–≤–∞—è) */}
                    {note?.id && (
                        <IconButton
                            color="error"
                            onClick={async () => {
                                // if (window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É?")) {
                                    try {
                                        await onDelete(note.id);
                                        setNotes((prevNotes) => prevNotes.filter((n) => n.id !== note.id));
                                        onClose();
                                    } catch (error) {
                                        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏.");
                                    }
                                // }
                            }}
                        >
                            <DeleteIcon />
                            Delete
                        </IconButton>
                    )}

                    {/* –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è */}
                    <IconButton color="primary" onClick={() => handleCopyFromModal()}>
                        <ContentCopyIcon />
                        Copy
                    </IconButton>

                    {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã */}
                    <IconButton color="secondary" onClick={onClose}>
                        <CancelIcon />
                        Close
                    </IconButton>

                    {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
                    <IconButton color="primary" onClick={handleSave}>
                        <SaveIcon />
                        Save
                    </IconButton>
                </Box>
            </Box>
        </Modal>
    );
};

export default NoteModal_new;